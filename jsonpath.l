%{
#include "jsonpath.tab.h"     // Include header generated by Bison/Yacc
#include <stdlib.h>
#include <string.h>
%}

%%

"\$"          { return DOLLAR; }           // Match root of the JSONPath: $
"\.\."          { return RECURSIVE; }        // Match recursive descent: ..
"\."            { return DOT; }              // Match dot notation for child access: .
"\["            { return LBRACKET; }         // Match left square bracket: [
"\]"            { return RBRACKET; }         // Match right square bracket: ]
"\:"            { return COLON; }            // Match colon for slice: :
"\,"            { return COMMA; }            // Match comma for union or lists: ,
"\*"        { return WILDCARD; }         // Match wildcard selector: [*]

\"[^\"]*\"      {                            // Match double-quoted string (e.g., "book")
    yylval.str = strdup(yytext);             // Store matched string in yylval
    return STRING;                           // Return STRING token
}

[0-9]+          {                            // Match numbers (array indices, slice values)
    yylval.num = atoi(yytext);               // Convert to integer and store
    return NUMBER;                           // Return NUMBER token
}

[a-zA-Z_][a-zA-Z0-9_]* {
    yylval.str = strdup(yytext);             // Match identifiers (keys like book, author)
    return IDENTIFIER;                       // Return IDENTIFIER token
}

[ \t\n\r]+      { /* Ignore whitespace */ }  // Skip all whitespace characters

.               { return yytext[0]; }        // Fallback: return single character as-is

%%
